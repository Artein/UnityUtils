name: Run project Tests
run-name: Run project Tests
on:
  pull_request: {}
  push: { branches: [ main ] }
jobs:  
  testAllModes: # Job 1
    name: ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    timeout-minutes: 5 # By default timeout is 360 minutes, but this repository is small
    strategy:
      fail-fast: false
      matrix:
        projectPath: [test-project]
        testMode: [playmode, editmode]
    steps:
      - name: Checkout repository # Step 1
        uses: actions/checkout@v3
        with:
          lfs: true
          clean: true
          submodules: true
      - name: Cache workflow dependencies # Step 2
        if: success()
        uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
      - name: Run Unity TestFramework # Step 3
        if: success()
        id: unity-test-runner
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - name: Upload TestFramework results # Step 4
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Tests results for ${{ matrix.testMode }}
          path: ${{ steps.unity-test-runner.outputs.artifactsPath }}
      - name: Upload TestCoverage results # Step 5
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: Coverage results for ${{ matrix.testMode }}
          path: ${{ steps.unity-test-runner.outputs.coveragePath }}