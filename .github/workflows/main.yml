name: Main
run-name: Main

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
 
# GitHub currently does not support YAML anchors
# The idea is to get rid off duplicate action usage. Using anchors setup actions with versions once and then just use across workflow 
#cache_action_declaration: &cache_action actions/cache@v3.0.11

jobs:  
  runAllTests: # Job 1
    name: Run all tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository # Step 1
        uses: actions/checkout@v3
        with:
          lfs: true
          clean: true
          submodules: true
          ref: ${{ github.event.pull_request.head.ref }} # On push event will be replaced with '' which is default value

      - name: Create LFS files list # Step 2
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache # Step 3
        id: lfs-cache
        uses: actions/cache@v3.0.11
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull # Step 4
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Restore Library cache # Step 5
        uses: actions/cache@v3.0.11
        with:
          path: Library
          key: Library-run-tests
          restore-keys: |
            Library-run-tests
            Library-
          
      - name: Run TestFramework # Step 6
        id: unity-test-runner
        uses: game-ci/unity-test-runner@v2.1.0
        with:
          testMode: all
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+UnityUtils'
          
      - name: Zip CodeCoverage results # Step 7
        run: zip -r CodeCoverage.zip ${{ steps.unity-test-runner.outputs.coveragePath }} -x ".git/*" ".github/*"
          
      - name: Upload TestFramework results # Step 8
        if: always()
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Test results
          path: ${{ steps.unity-test-runner.outputs.artifactsPath }}
          
      - name: Upload CodeCoverage results # Step 9
        if: always()
        uses: actions/upload-artifact@v3.1.1
        with:
          name: CodeCoverage results
          path: CodeCoverage.zip

  deployCodeCoverageResults: # Job 2 (push only events)
    # UNCOMMENT THIS
    # if: github.ref == 'refs/heads/main'
    needs: runAllTests
    name: Deploy CodeCoverage results
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout repository # Step 1
        uses: actions/checkout@v3
        with:
          lfs: true
          clean: true
          submodules: true
          ref: gh-pages
          
      - name: Download CodeCoverage results # Step 2
        uses: actions/download-artifact@v3.0.1
        with:
          name: CodeCoverage results
          
      - name: Unzip CodeCoverage results # Step 3
        run: unzip -o CodeCoverage.zip

      - name: Check for modified files # Step 4
        id: git-check
        run: echo name=modified::$(if [ -n "$(git status --porcelain)" ]; then echo "true"; else echo "false"; fi) >> $GITHUB_OUTPUT
        
        # TEST 1
      - name: Git Status --porcelain
        run: git status --porcelain
        
        # TEST 2
      - name: if ([ -n "$(git status --porcelain)" ])
        id: git-check-2
        run: |
          if ([ -n "$(git status --porcelain)" ])
          {
            echo "modified=true" >> $GITHUB_OUTPUT
          }
          else
          {
            echo "modified=false" >> $GITHUB_OUTPUT
          }
        
        # TEST 3
      - name: isCodeCoverageModified
        run: echo "${{ steps.git-check-2.outputs.modified }}"

      - name: Commit CodeCoverage results # Step 5
        if: success() && steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name '${{ github.event.push.sender }}'
          git config --global user.email '${{ github.event.push.pusher.email }}'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add CodeCoverage
          git commit -m "[automated commit] Update CodeCoverage results following ${{ github.event.push.after }} commit after PR merge (invoked by ${{ github.workflow }} Action)"
          git push
        
      - name: Deploy CodeCoverage SVG badge to Gist # Step 6
        uses: exuanbo/actions-deploy-gist@v1.1.4
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_id: dc0873043aeff5654ce66349d38fe89d
          gist_file_name: UnityUtils-main-coverage.svg
          gist_description: CodeCoverage badge for the main branch of ${{ github.repository }} repository
          file_path: CodeCoverage/Report/badge_combined.svg
          file_type: text